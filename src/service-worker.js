/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});







// Configuracion manual

// Ciclo de vida de la instalacion del service-worker
self.addEventListener("install", async (event) => {
  //creamos la cache
  const cache = await caches.open("cache-1");

  //agregamos a la cache todos los recursos que queremos
  await cache.addAll([
    "https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css",
    "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.0-2/css/all.min.css",
    "/favicon.ico",
  ]);
});

// las peticiones que queremos guardar en cache
const apiOfflineFallbacks = [
  'http://localhost:4000/api/auth/renew',
  'http://localhost:4000/api/events'
]

// CICLO DE VIDA FETCH se dispara cuando venga cualquier request
// sea post, get, put, delete, patch etc
self.addEventListener("fetch", (event) => {
  // nos permite tener control de las peticiones que llegan al front
  if(!apiOfflineFallbacks.includes(event.request.url)) return;
  //entonces sis urls son direfentes a las que estan en apiOfflineFallbacks voy a continuar
  //cualdo almacenamos respuestas de request put, post delete, path, get etc en cache
  // la estrategia es llamada network fist with cache fallback
  // esto nos ayuda a guardar por ejemplo la url de la request solicitada y su respuesta si anteriormente es positiva
  // y esar esto, por ejemplo la llamada a un token y su url en la cache y de esa manera si nos quedamso sin internet poder
  //hacer uso de esto y darle la sesacion al usuario que esta navegando normalmente.
  const resp = fetch(event.request)
    .then((response) => {
      if (!response) {
        return caches.match(event.request);
      }

      //en este punto tenemos acceso de lectura y escritura al cache
      caches.open("cache-dynamic").then((cache) => {
        cache.put(event.request, response); //si alguien mas hace la misma request respondere con mi response
      });

      return response.clone();
    })
    .catch((err) => {
      //si todo falla mostrara la estesta anterior
      return caches.match(event.request);
    });
  event.respondWith(resp);
});

